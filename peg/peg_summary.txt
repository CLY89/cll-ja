* PEG 文法について

0. このテキストについて

PEG 文法の説明を書き始めたのだが、ちょっと説明が広大な領域に広がってしまい、
とても一週間でまとめられそうにないので、現在調べた範囲内でまとめてみる。
十分に理解できていないために、まずい説明となっているが、
雰囲気だけでも伝えられるかと思って書く。

1. 構文解析について

一次元的な文字や音、記号の並びを、木構造に変換すること。

2. 文法の種類と力関係

正規文法 < 文脈自由文法 < 文脈依存文法 < 制限のない文法

右に行くほど表現できる文法の幅が広がる。
正規文法は入れ子になった文法は表現できない。
文脈自由文法は入れ子になった文法も表現できる。
文脈依存文法は前後の要素によって
それらにはさまれる部分の解釈を変えることができる。

また、文脈自由文法をコンピュータで解析する方法に以下のような種類がある。
力関係の順に並べる。

LL法 < SL法 < LALR法 < LR法 < GLR法

GLR法は文脈自由文法のすべてを解析できる。

また、LL(1)、LALR(1)、LR(1) のように後ろに数字をつけて
「先読み」の数を示す。

解析の効率(速度)と解析できる文法の広さのバランスから、
LALR(1) が最も広く使われているようだ。

yacc も LALR(1) を使っている。

3. BNF 記法

文脈自由文法を表現する表記法のひとつである。
人間にとって書きやすい表記法であると思われる。

4. PEG 文法

BNF と記法自体はよく似ている。
ただし、BNF では曖昧性を許すのに対して PEGでは曖昧さがない。
PEG ではそれぞれの選択肢に優先順位がある。
また、考えかたとして、PEG ではその表記がコンピュータの動作に対応づけられる。

e1 / e2 という選択において、コンピュータの動作としては、
まず e1 を試み、それが失敗した場合にのみ e2 を試みる、という動作となる。

5. PEG の力

PEG で表現可能な文法の幅がどの程度なのかよくわからないが、
すくなくとも LALR よりは広いと思われる。
おそらく文脈自由文法の大部分と、文脈依存文法の一部といったところか。

6. Packrat parsing

上記のように PEG 文法はコンピュータの動作と一対一対応するので
構文解析器を作るのは簡単である。
しかし、素直な設計にしてしまうと、指数関数的に処理速度が低下してしまう。
よって、途中の結果をメモしながら構文解析する方法として、
Packrat parsing という手法がある。
これは、Haskell の遅延評価(必要とされるまで計算を遅らせること)という仕組みを
うまく使うことで比較的簡単に作ることができる。

7. PEG と yacc(LALR(1))

一見して明らかな大きな違いは、yacc がまずは字句解析によって、
文字列をトークン列に変えてから構文解析するのに対して、
PEG では字句解析と構文解析とを統一的に行うことができるということがある。

また、上記の通り PEG が無制限にバックトラックを行えるために、
より表現の幅が広がる面もある。

8. ZOI と PEG

ZOI によって作られる構造は PEG で直接扱うことはできないと思われる。
僕自身は ZOI の後に来るセパレータを NULL 文字に置き換えるという ad-hoc な
やりかたを取った。
ZOI の部分だけ事前の字句解析をしておくか、あるいは PEG 内で代入可能な変数を
導入するか、どちらかが必要なように思う。

(注)
バックトラック: ある要素を読みに行き途中で失敗して次の要素として読み直すこと
yacc ではバックトラックを行わない: まちがっている可能性あり、あとで調べること
